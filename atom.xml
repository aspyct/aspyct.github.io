<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Aspyct.org]]></title>
  <link href="http://aspyct.github.com/aspyct/atom.xml" rel="self"/>
  <link href="http://aspyct.github.com/aspyct/"/>
  <updated>2014-02-09T21:36:31+01:00</updated>
  <id>http://aspyct.github.com/aspyct/</id>
  <author>
    <name><![CDATA[Antoine d'Otreppe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spitfire project, day #3: the box blueprints]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2013/07/20/spitfire-project-day-number-3-the-box-blueprints/"/>
    <updated>2013-07-20T15:45:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2013/07/20/spitfire-project-day-number-3-the-box-blueprints</id>
    <content type="html"><![CDATA[<p>Now that I have a nice box prototype made of cardboard, it&#8217;s time to make actual blueprints and size calculations, refining the prototype with some ideas.</p>

<!-- more -->


<p>If you&#8217;re new here, and wish to read the whole project, start on <a href="http://aspyct.github.com/aspyct/blog/2013/07/15/spitfire-project-day-number-1/">day #1 of this project</a>.</p>

<h2>The blueprints</h2>

<p>As I said above, I made some arrangements to the original prototype. For example, I found a way to hide hinges. Apart from some screws, not too much clutter should be visible from the outside.</p>

<p><img src="http://aspyct.github.com/aspyct/media/spitfire/box-blueprints.png" alt="The box blueprints" /></p>

<p><a href="http://aspyct.github.com/aspyct/media/spitfire/box-blueprints.pdf">Download blueprints as PDF</a>.</p>

<h2>Size calculations</h2>

<p>I started on a base control panel size of 20cm width and 15cm height. But to be honest, I don&#8217;t really know the required size&#8230; At least I have the formulas.</p>

<h3>Parameters</h3>

<pre><code>height inside = 3cm
panel width = 20cm
panel height = 15cm
panel horizontal border = 2cm
panel vertical border = 3cm
panel angle = pi / 9 
wood thickness = 0.5cm
stiffener thickness = 1.5cm
saw width = 0.1cm
</code></pre>

<h3>Intermediary products and functions</h3>

<pre><code>surface = width * height

panel climb = sin(panel angle) * panel height
            =&gt; 5.13cm

base width = panel width
base height = cos(panel angle) * panel height
           =&gt; 14.1cm

front height = height inside + wood thickness
back height = front height + panel climb

climb on back stiffener = tan(panel angle) * stiffener thickness
                        =&gt; 0.55cm

max(x, y) = if x &gt; y then x else y
min(x, y) = if x &lt; y then x else y
</code></pre>

<h3>Resulting measurements</h3>

<p>Part 1: back vertical stiffener</p>

<pre><code>p1 length = back height - climb on back stiffener - wood thickness
          =&gt; 7.58cm
</code></pre>

<p>Part 2: front vertical stiffener</p>

<pre><code>p2 length = front height - wood thickness
          =&gt; 3cm
</code></pre>

<p>Part 3: side stiffener</p>

<pre><code>p3 length = base height - 2 * (stiffener thickness + wood thickness)
          =&gt; 10.1cm
</code></pre>

<p>Part 4: back stiffener</p>

<pre><code>p4 length = base width - 2 * (stiffener thickness + wood thickness)
          =&gt; 16cm
</code></pre>

<p>Part 5: side board</p>

<pre><code>p5 width = base height
         =&gt; 14.1cm
p5 front height = front height + wood thickness
                =&gt; 4cm
p5 back height = height inside + panel climb + wood thickness
               =&gt; 8.63cm
</code></pre>

<p>PartÂ 6: back board</p>

<pre><code>p6 width = base width - 2 * wood thickness
         =&gt; 19cm
p6 height = back height
          =&gt; 8.63cm
</code></pre>

<p>Part 7: front board</p>

<pre><code>p7 width = base width - 2 * wood thickness
         =&gt; 19cm
p7 height = front height
          =&gt; 3.5cm
</code></pre>

<p>Part 9: bottom board</p>

<pre><code>p9 width = base width - 2 * wood thickness
         =&gt; 19cm
p9 height = base height - 2 * wood thickness
          =&gt; 13.1cm
</code></pre>

<p>Part 10: panel</p>

<pre><code>p10 width = panel width + 2 * panel horizontal border
          =&gt; 24cm
p10 height = panel height + 2 * panel vertical border
           =&gt; 21cm
</code></pre>

<p>Board surface</p>

<pre><code>p5 height diff = p5 back height - p5 front height
               =&gt; 4.63cm

p5 surface = p5 width * p5 front height + (p5 width * p5 height diff) / 2
           =&gt; 89.01cm^2

p6 surface = p6 width * p6 height
p7 surface = p7 width * p7 height
p9 surface = p9 width * p9 height
p10 surface = p10 width * p10 height
</code></pre>

<p>Totals &amp; required material</p>

<pre><code>total stiffener length = p1 length + p2 length + p3 length + p4 length + 3 * saw width
                       =&gt; 36.98cm

total board surface = p5 surface + p6 surface + p7 surface + p9 surface + p10 surface
                    =&gt; 1072.3cm^2


base board required width = max(base width/cm, min(p10 width/cm, p10 height/cm)) * cm
                          =&gt; 21cm
base board required height = p5 front height + p5 back height # the two side plates
                           + p6 height + p7 height + p9 height
                           + max(p10 width/cm, p10 height/cm) * cm
                           + 5 * saw width
                           =&gt; 62.36cm
</code></pre>

<p>If you find something wrong in here, please tell me :)</p>

<h2>Find it on github</h2>

<p>As usual, all of this can be found in the <a href="https://github.com/aspyct/spitfire">github repository of the project</a>. Please note that you&#8217;ll need <a href="http://www.omnigroup.com/products/omnigraffle/">Omnigraffle</a> to open the blueprints. The calculations markdown file can be opened with <a href="http://calca.io/">Calca</a> for better results.</p>

<h2>To be continued</h2>

<p>The arduino leonardo I needed for this project recently arrived. Next time we&#8217;ll try to interface that with War Thunder :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spitfire project, day #2: the box prototype]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2013/07/16/spitfire-project-day-number-2-box-prototype/"/>
    <updated>2013-07-16T21:23:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2013/07/16/spitfire-project-day-number-2-box-prototype</id>
    <content type="html"><![CDATA[<p>For this controller, I need a box. I want it to be classy, sober, and a bit old-school. The only real requirement is that it has to provide an easy access to electronics in case something goes wrong. <a href="http://en.wikipedia.org/wiki/Murphy's_law">Murphy&#8217;s law</a>, you know&#8230;</p>

<!-- more -->


<p>Some of you may arrive out of the blue here. So have a look at the <a href="http://aspyct.github.com/aspyct/blog/2013/07/15/spitfire-project-day-number-1/">previous article, day #1</a>.</p>

<p>So I tear apart my joystick box, cardboard stuff, and built a small control box with it. Or rather a prototype of that box to be.</p>

<h2>Tools</h2>

<p>With a few simple tools like swiss army knife, a set square, a pen and some tape, I started destroying one box and building the other :) This is the bottom that you can see here: (the tape roll ran away during the picture)</p>

<p><img class="center" src="http://aspyct.github.com/aspyct/media/spitfire/box_prototype1.jpg" title="'A few tools and some cardboard'" ></p>

<h2>Building the box</h2>

<p>Then I quickly added the top as well as some switches and LEDs. I think it looks nice already, I&#8217;m gonna love it!</p>

<p><img class="center" src="http://aspyct.github.com/aspyct/media/spitfire/box_prototype4.jpg" title="'After adding the top and some switches'" ></p>

<p>After some fiddling around, I decided to go for a rear opening. With the cardboard, it works fine, but the wooden box will require hinges. And it&#8217;s probably a bad idea to put hinges in front, I might well hurt myself on this&#8230;</p>

<p><img class="center" src="http://aspyct.github.com/aspyct/media/spitfire/box_prototype2.jpg" title="'Rear opening system'" ></p>

<p>With the sides, and the arduino inside for the show&#8230;</p>

<p><img class="center" src="http://aspyct.github.com/aspyct/media/spitfire/box_prototype3.jpg" title="'The arduino inside'" ></p>

<h2>Finished prototype</h2>

<p>So that&#8217;s it. Not really impressive, eh? But this gives a good idea of the expected final shape, and it helped me think about some important stuff like hinge position, cable management etc. A few hours work, little to no cost for so many saved hours and material later :)</p>

<p><img class="center" src="http://aspyct.github.com/aspyct/media/spitfire/box_prototype5.jpg" title="'The finished prototype'" ></p>

<p>On top of it is the first list of the controls I want on this box. More on that later :)</p>

<h2>To be continued</h2>

<p>This story is not over yet. Read the <a href="http://aspyct.github.com/aspyct/blog/2013/07/20/spitfire-project-day-number-3-the-box-blueprints/">next post: blueprints and dimensions</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spitfire project, day #1]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2013/07/15/spitfire-project-day-number-1/"/>
    <updated>2013-07-15T00:00:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2013/07/15/spitfire-project-day-number-1</id>
    <content type="html"><![CDATA[<p>So we moved in with a few friends. A bunch of geeks just like me&#8230; fine move :) We call our house the &#8220;Geekarium&#8221;. And of course, we play video games. Or more specifically, we play <a href="http://warthunder.com/">War Thunder</a>, a WW2 airplane simulation.</p>

<p>I like to pretend these planes are real, and the keyboard is not enough. Arduino to the rescue :)</p>

<!-- more -->


<h2>A bit of history</h2>

<p>The Supermarine Spitfire is probably one of the best known aircraft out there. A legend, dare I say.</p>

<p><img class="center" src="http://aspyct.github.com/aspyct/media/spitfire/spitfire_side_view.jpg" width="480" height="360" title="'A spitfire seen from its side'" ></p>

<p>Created a bit before WW2, the Spitfire was used along the Hurricane during the Battle of Britain, to successfully deflect german bombers.</p>

<p>It was fitted with a Merlin engine and beautiful elliptical wings, which made him very recognisable among the other airplanes.</p>

<p><img class="center" src="http://aspyct.github.com/aspyct/media/spitfire/spitfire_bottom_view.jpg" width="457" height="480" title="'A spitfire seen from bottom'" ></p>

<p>Read more about this masterpiece of history on <a href="http://en.wikipedia.org/wiki/Supermarine_Spitfire">its wikipedia page</a>.</p>

<h2>So I started building this panel&#8230;</h2>

<p>So yes, I&#8217;ve fallen in love again with airplanes. So much that I actually decided to supplement my joystick with a custom control panel. You know, for all those things that usually remain on the keyboard: start engine, landing gear control, flaps etc.</p>

<p><img class="center" src="http://aspyct.github.com/aspyct/media/spitfire/arduino_spitfire.jpg" width="480" height="388" title="'The early arduino prototype'" ></p>

<p>No blueprints yet, only experimenting some stuff with my arduino. Roughly, what I came up with until now is a sketch that monitors one or more digital inputs, and reports on the serial port.</p>

<p>Also available on github: <a href="https://github.com/aspyct/spitfire">https://github.com/aspyct/spitfire</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define INPUT_COUNT 2</span>
</span><span class='line'><span class="cp">#define TIMEGUARD 100 </span><span class="c1">// numper of milliseconds before a new input is taken into account</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">inputs</span><span class="p">[</span><span class="n">INPUT_COUNT</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">6</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">states</span><span class="p">[</span><span class="n">INPUT_COUNT</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">keymap</span><span class="p">[</span><span class="n">INPUT_COUNT</span> <span class="o">*</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="sc">&#39;d&#39;</span><span class="p">,</span> <span class="sc">&#39;g&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="sc">&#39;6&#39;</span><span class="p">,</span> <span class="sc">&#39;\0&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">fired</span><span class="p">[</span><span class="n">INPUT_COUNT</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">INPUT_COUNT</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pinMode</span><span class="p">(</span><span class="n">inputs</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">INPUT</span><span class="p">);</span>
</span><span class='line'>    <span class="n">states</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">readState</span><span class="p">(</span><span class="n">inputs</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">fired</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Wait for serial connection to be established</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">Serial</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">readState</span><span class="p">(</span><span class="kt">int</span> <span class="n">pin</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">digitalRead</span><span class="p">(</span><span class="n">pin</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">INPUT_COUNT</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pin</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">readState</span><span class="p">(</span><span class="n">pin</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">!=</span> <span class="n">states</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">time</span> <span class="o">-</span> <span class="n">fired</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">TIMEGUARD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">states</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>      <span class="n">fired</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">char</span> <span class="n">response</span> <span class="o">=</span> <span class="n">keymap</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">val</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>To be continued</h2>

<p>As you can see, this is far from finished&#8230; Read the <a href="http://aspyct.github.com/aspyct/blog/2013/07/16/spitfire-project-day-number-2-box-prototype/">post for day #2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android: detecting charge state]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2013/05/16/android-detecting-charge-state/"/>
    <updated>2013-05-16T22:14:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2013/05/16/android-detecting-charge-state</id>
    <content type="html"><![CDATA[<p>Battery is expensive. Not to say that you can&#8217;t buy one, but you really should use resources wisely when you develop a mobile application. Yet sometimes you need to do some long run process or heavy calculation.</p>

<p>For that matter, Android allows us to detect whether the device is plugged in and charging. Let&#8217;s see how.</p>

<!-- more -->


<p>One thing we can do is ask whether the device is plugged-in. That can easily be done with a few lines of code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">checkBatteryState</span><span class="o">(</span><span class="n">View</span> <span class="n">sender</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">IntentFilter</span> <span class="n">filter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntentFilter</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_BATTERY_CHANGED</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">batteryStatus</span> <span class="o">=</span> <span class="n">registerReceiver</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">filter</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">chargeState</span> <span class="o">=</span> <span class="n">batteryStatus</span><span class="o">.</span><span class="na">getIntExtra</span><span class="o">(</span><span class="n">BatteryManager</span><span class="o">.</span><span class="na">EXTRA_STATUS</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">strState</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">chargeState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">BatteryManager</span><span class="o">.</span><span class="na">BATTERY_STATUS_CHARGING</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">BatteryManager</span><span class="o">.</span><span class="na">BATTERY_STATUS_FULL</span><span class="o">:</span>
</span><span class='line'>            <span class="n">strState</span> <span class="o">=</span> <span class="s">&quot;charging&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="n">strState</span> <span class="o">=</span> <span class="s">&quot;not charging&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TextView</span> <span class="n">tv</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">);</span>
</span><span class='line'>    <span class="n">tv</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">strState</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that charge efficiency may change according to the type of power source. You may want to investigate the <code>BatteryManager.EXTRA_PLUGGED</code> to get more information.</p>

<p>Astute readers will notice that we used a sticky broadcast to get the status. It means we can also create a <a href="http://developer.android.com/reference/android/content/BroadcastReceiver.html">BroadcastReceiver</a> to monitor changes for the battery status. This is left as an exercise to you, dear reader :)</p>

<p>You can checkout the <a href="https://github.com/aspyct/android-batterycheck">example on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android: Switch wifi on/off]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2013/05/04/android-switch-wifi-on-off/"/>
    <updated>2013-05-04T11:30:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2013/05/04/android-switch-wifi-on-off</id>
    <content type="html"><![CDATA[<p>Sometime you simply need more than HTTP requests or buttons. Sometimes you need to play with device state, switch the wifi on for example. Android provide a very easy API to do that.</p>

<!-- more -->


<p>And to do that, we need to use the <a href="http://developer.android.com/reference/android/net/wifi/WifiManager.html">WifiManager</a>. As any other system service, we can get it through the context, usually our activity.</p>

<p>Let&#8217;s write some code to toggle the wifi state. It involves 1. getting the current state and 2. changing it to the other state. But first things first, we need the permissions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!--  Add these permissions to your android manifest --&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now that we have the permissions, finally, the code!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">toggleWifi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Get the WifiManager service from the context</span>
</span><span class='line'>  <span class="n">WifiManager</span> <span class="n">wm</span> <span class="o">=</span> <span class="o">(</span><span class="n">WifiManager</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">WIFI_SERVICE</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Read the current state. True is On, False is Off</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">currentState</span> <span class="o">=</span> <span class="n">wm</span><span class="o">.</span><span class="na">isWifiEnabled</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// And now, switch to the other state</span>
</span><span class='line'>  <span class="n">wm</span><span class="o">.</span><span class="na">setWifiEnabled</span><span class="o">(!</span><span class="n">currentState</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// You&#39;re done :)</span>
</span><span class='line'>  <span class="c1">// Note that it can take some time for the wifi to reconnect</span>
</span><span class='line'>  <span class="c1">// when you switch it on.</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom page layout with Jekyll and Octopress]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/09/15/custom-page-layout-with-octopress-jekyll/"/>
    <updated>2012-09-15T22:06:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/09/15/custom-page-layout-with-octopress-jekyll</id>
    <content type="html"><![CDATA[<p>When you write a Jekyll (or Octopress) page, you may chose to use a custom layout. For example, the <a href="http://aspyct.github.com/aspyct/praline">page for PralinÃ©</a> sports a few buttons at the top, linking to important project resources. Let&#8217;s walk through an example with this project layout.</p>

<!-- more -->


<h2>Creating the custom layout</h2>

<p>First, let&#8217;s create our custom layout. Since it is pretty similar to a simple page, we&#8217;ll just copy the page layout first. The following commands assume you&#8217;re working with octopress, but they should be pretty similar for jekyll.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cp <span class="nb">source</span>/_layouts/page.html <span class="nb">source</span>/_layouts/project.html
</span></code></pre></td></tr></table></div></figure>


<p>We also need to select the <code>project</code> layout in our project page. In my case, we&#8217;re talking about <code>praline/index.markdown</code>. So change the <code>layout</code> attribute in the yaml front-matter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>layout: project
</span><span class='line'>title: <span class="s2">&quot;PralinÃ©&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, next time you generate the article, the <code>project</code> layout will be used instead of <code>page</code>. Go ahead and do a simple test by writing some funny text in the new layout.</p>

<h2>Adding data to your page</h2>

<p>Of course, you probably want to add some metadata to your page, and use it to render the final html. In my case, I wanted to add custom links. Simply add this information in the yaml front-matter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>layout: project
</span><span class='line'>title: <span class="s2">&quot;PralinÃ©&quot;</span>
</span><span class='line'>date: 2012-09-15 00:53
</span><span class='line'>links:
</span><span class='line'>  - Source: https://github.com/aspyct/praline
</span><span class='line'>  - Documentation: http://rubydoc.info/gems/praline/frames
</span><span class='line'>  - Rubygems: https://rubygems.org/gems/praline
</span><span class='line'>  - Zipball: https://github.com/aspyct/praline/zipball/master
</span></code></pre></td></tr></table></div></figure>


<p>And this data can be retreived through the <code>page</code> object in your layout. For example, to access the links, I need to access <code>page.links</code>. I&#8217;m using these links to create buttons in my layout with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;project-links&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% for link_hash in page.links %}
</span><span class='line'>    {% for link in link_hash %}
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">&quot;button&quot;</span> <span class="na">href=</span><span class="s">&quot;{{ link[1] }}&quot;</span><span class="nt">&gt;</span>{{ link[0] }}<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    {% endfor %}
</span><span class='line'>  {% endfor %}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Do it with style</h2>

<p>But these links do not look good, definitely&#8230; We need to add some css styling. The easiest way to do so is edit the <code>sass/custom/_styles.scss</code> file, and add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nt">ul</span><span class="nc">.project-links</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">margin-top</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>    <span class="na">list-style-type</span><span class="o">:</span> <span class="no">none</span><span class="err">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">li</span> <span class="err">{</span>
</span><span class='line'>        <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">a</span> <span class="err">{</span>
</span><span class='line'>        <span class="na">background</span><span class="o">:</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$main-bg</span><span class="o">,</span> <span class="mi">5</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'>        <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="o">-</span><span class="no">block</span><span class="err">;</span>
</span><span class='line'>        <span class="na">padding</span><span class="o">:</span> <span class="mf">.4</span><span class="kt">em</span> <span class="mf">.8</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>        <span class="na">margin-right</span><span class="o">:</span> <span class="mf">.5</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>        <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nf">lighten</span><span class="p">(</span><span class="nv">$link-color-hover</span><span class="o">,</span> <span class="mi">10</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'>        <span class="na">text-decoration</span><span class="o">:</span> <span class="no">none</span><span class="err">;</span>
</span><span class='line'>        <span class="na">color</span><span class="o">:</span> <span class="nf">mix</span><span class="p">(</span><span class="nv">$text-color</span><span class="o">,</span> <span class="nv">$text-color-light</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'>        <span class="k">@extend</span> <span class="nc">.serif</span><span class="o">;</span>
</span><span class='line'>        <span class="k">@include</span><span class="nd"> transition</span><span class="p">(</span><span class="no">background-color</span> <span class="mf">.5</span><span class="kt">s</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'>        <span class="k">&amp;</span><span class="nd">:hover</span> <span class="err">{</span>
</span><span class='line'>          <span class="na">background</span><span class="o">:</span> <span class="nv">$link-color-hover</span><span class="err">;</span>
</span><span class='line'>          <span class="na">text-shadow</span><span class="o">:</span> <span class="no">none</span><span class="err">;</span>
</span><span class='line'>          <span class="na">color</span><span class="o">:</span> <span class="nv">$main-bg</span><span class="err">;</span>
</span><span class='line'>        <span class="err">}</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if you want to do it clean, I invite you to create your own style pack. Look around in the <code>sass</code> directory for directions.</p>

<h2>A last note</h2>

<p>We worked directly in the <code>source</code> and <code>sass</code> directories of Octopress. That way, we had instant feedback on our work. But if you try to install another theme, all your good work could be lost instantly. You should definitely save it into the <code>.themes</code> directory.</p>

<p>Hope this is useful :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web functional testing with rspec and PralinÃ©]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/09/15/web-functional-testing-with-rspec-and-praline/"/>
    <updated>2012-09-15T00:56:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/09/15/web-functional-testing-with-rspec-and-praline</id>
    <content type="html"><![CDATA[<p>Ruby feels just right to automate tasks such as testing. And it&#8217;s even more true with rspec. So how about some web functional testing with all that good stuff? <a href="http://aspyct.github.com/aspyct/praline">PralinÃ©</a> helps you define your web test cases in human language.</p>

<p><a href="http://aspyct.github.com/aspyct/praline">Read more about PralinÃ©</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing the naked_man]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/09/09/introducing-the-naked-man/"/>
    <updated>2012-09-09T23:51:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/09/09/introducing-the-naked-man</id>
    <content type="html"><![CDATA[<p>Read &amp; search the man pages online with the <a href="http://nakedman.aspyct.org">naked_man</a>. This is still beta software: please bear with me as I improve the service. Please do send me any remark or suggestion you would have :) See the sidebar here for contact info.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional web testing with selenium and ruby]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/09/09/functional-web-testing-with-selenium-and-ruby/"/>
    <updated>2012-09-09T19:40:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/09/09/functional-web-testing-with-selenium-and-ruby</id>
    <content type="html"><![CDATA[<p>I can see two reasons to use automation: 1) because you&#8217;re <del>lazy</del> a good developer and don&#8217;t want to do a task by hand twice, and 2) because you prefer turning a boring task into a neat scripting challenge :) Well, next time you do anything related to a web interface, think about selenium and ruby!</p>

<!-- more -->


<p>Let&#8217;s not wait longer, you will need the <code>selenium-webdriver</code> gem. I personally use <a href="http://rvm.io">RVM</a>, and therefore some commands will be slightly different. If you don&#8217;t use it yet, well you should probably, it&#8217;s great!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm all <span class="k">do </span>gem install selenium-webdriver
</span></code></pre></td></tr></table></div></figure>


<p>And let&#8217;s start by opening an interactive ruby shell and play somewhat with the selenium API (some output lines are stripped for clarity).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">irb</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;selenium-webdriver&#39;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">browser</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="ss">:firefox</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>By this time, firefox should be opening and soon ready. If you don&#8217;t have firefox installed on your machine, now is the time ;) So let&#8217;s open the google homepage.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;http://www.google.be&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make a search, for &#8220;aspyct&#8221; for example. Of course you will first need to locate the input. You&#8217;re probably familiar with firebug or equivalent, so find the <code>id</code> of that input. If not, simply right click the input and &#8220;inspect element&#8221;.</p>

<p><img class="center" src="http://aspyct.github.com/aspyct/media/ruby-selenium/firefox-google.png"></p>

<p>So, for me, the <code>id</code> is <code>gbqfq</code>. Now grab this element from our script, and send some text to it. And by the way, click on the search button.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">input</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="s1">&#39;gbqfq&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">input</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s1">&#39;aspyct&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">button</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="s1">&#39;gbqfb&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">button</span><span class="o">.</span><span class="n">click</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://aspyct.github.com/aspyct/media/ruby-selenium/google-aspyct.png"></p>

<p>Now that you&#8217;ve found such a wonderful website (that is, aspyct.org), for sure you want to visit it! Click the link named &#8220;Aspyct.org&#8221;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">link</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:link</span><span class="p">,</span> <span class="s1">&#39;Aspyct.org&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">link</span><span class="o">.</span><span class="n">click</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you probably want to make sure that you landed on the correct website. You could check the page title, or browse the DOM with <a href="http://www.w3schools.com/xpath/xpath_syntax.asp">XPath</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">browser</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;Aspyct.org&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s1">&#39;//h1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;Aspyct.org&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you know what to do next time you have to fill the fields with the data from an CSV file ;) But most importantly, you can automate your functional tests and develop safer and faster. Have fun!</p>

<p>See also: <a href="http://seleniumhq.org/docs/03_webdriver.html">Selenium WebDriver documentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitbucket read-only SSH access]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/09/08/bitbucket-read-only-ssh-access/"/>
    <updated>2012-09-08T14:25:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/09/08/bitbucket-read-only-ssh-access</id>
    <content type="html"><![CDATA[<p>I&#8217;m about to start a small webapp related to the upcoming ManPad. Of course, the sources of this app are securely stored in a git repository, on bitbucket actually.</p>

<p>To make things easy, I&#8217;d like to be able to deploy the latest version of the app by simply issuing a <code>git pull</code>. But to make things secure, I need to be sure that corrupting my server would not allow anyone to write to my git repository.</p>

<p>That&#8217;s where so-called &#8220;deployment keys&#8221; come into play. Bitbucket allow us to declare read-only SSH keys for a specific repository, and it works even if your repository is private, which is a very cool option!</p>

<p><a href="http://blog.bitbucket.org/2012/06/20/deployment-keys/">Read more on their blog</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing ManPad]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/09/02/announcing-manpad/"/>
    <updated>2012-09-02T22:32:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/09/02/announcing-manpad</id>
    <content type="html"><![CDATA[<p>I had a busy week-end, alterning friends and development. And I&#8217;m actually quite proud of the two projects I started since Friday. The first one is <a href="http://aspyct.github.com/aspyct/webmanner">webmanner</a>, that I announced yesterday. But that converter was only created to be followed by ManPad :)</p>

<p><a href="http://aspyct.github.com/aspyct/manpad">Read more about ManPad</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby bit me for the first time]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/09/01/ruby-bit-me-for-the-first-time/"/>
    <updated>2012-09-01T22:26:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/09/01/ruby-bit-me-for-the-first-time</id>
    <content type="html"><![CDATA[<p>As you may know, I&#8217;m currently building a <a href="http://aspyct.github.com/aspyct/webmanner">man to html converter</a> in ruby. I noticed that in many manpages, we have <code>&lt;</code> signs, that must, of course, be escaped in html. After a bit of looking around, I added a few lines of code to fix that issue. Quick fix, easy win :) Then things went weird!</p>

<!-- more -->


<p>Have a look at the screenshot below, especially the highlighted zones. See? Despite calling the exact same script with the exact same arguments, output is different from one shell to another: <code>&amp;lt;</code> vs <code>&lt;</code>.</p>

<p><img class="center" src="http://aspyct.github.com/aspyct/media/webmanner-bug.png"></p>

<p>I quickly suspected the shell below to use an old version of the script, despite the fact that the <code>which</code> points to the right file. So I modified something in the file, and saw the change happen in both shells. But the <code>&amp;lt;</code> was still there&#8230;</p>

<p>After a while, I realized that <a href="https://rvm.io/">rvm</a> might be playing a trick on me. And indeed! The shell above uses ruby 1.8.7, where the shell below uses 1.9.3. And apparently, these two versions of ruby handle characters differently&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">rednose</span><span class="p">:</span><span class="o">~</span> <span class="n">aspyct</span><span class="err">$</span> <span class="n">ruby</span> <span class="o">--</span><span class="n">version</span>
</span><span class='line'><span class="n">ruby</span> <span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">7</span> <span class="p">(</span><span class="mi">2012</span><span class="o">-</span><span class="mo">02</span><span class="o">-</span><span class="mi">08</span> <span class="n">patchlevel</span> <span class="mi">358</span><span class="p">)</span> <span class="o">[</span><span class="n">universal</span><span class="o">-</span><span class="n">darwin12</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="ss">rednose</span><span class="p">:</span><span class="o">~</span> <span class="n">aspyct</span><span class="err">$</span> <span class="n">irb</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="sc">?&lt;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">60</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">rednose</span><span class="p">:</span><span class="o">~</span> <span class="n">aspyct</span><span class="err">$</span> <span class="n">ruby</span> <span class="o">--</span><span class="n">version</span>
</span><span class='line'><span class="n">ruby</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">(</span><span class="mi">2012</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">20</span> <span class="n">revision</span> <span class="mi">35410</span><span class="p">)</span> <span class="o">[</span><span class="n">x86_64</span><span class="o">-</span><span class="n">darwin12</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="ss">rednose</span><span class="p">:</span><span class="o">~</span> <span class="n">aspyct</span><span class="err">$</span> <span class="n">irb</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p194</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="sc">?&lt;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;&lt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Good to know, let&#8217;s solve this bug now :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aspyct's secrets: decorators and monkey patching]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/09/01/aspycts-secrets-decorators-and-monkey-patching/"/>
    <updated>2012-09-01T20:10:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/09/01/aspycts-secrets-decorators-and-monkey-patching</id>
    <content type="html"><![CDATA[<p>I still receive mails here and there about aspyct, and that&#8217;s always a great pleasure :) But aspyct is now discontinued for a simple reason: it&#8217;s very easy to do with python what aspyct offers.</p>

<p>PS: For those who are lost, aspyct was first an AOP (aspect oriented programming) library for python :)</p>

<p>Discover the <a href="http://aspyct.github.com/aspyct/aspyct">secrets behind the aspyct library</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert man to html with webmanner]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/09/01/convert-man-to-html-with-webmanner/"/>
    <updated>2012-09-01T19:01:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/09/01/convert-man-to-html-with-webmanner</id>
    <content type="html"><![CDATA[<p>If you follow me closely, maybe you&#8217;ve seen that I started creating an iPad unix man reader: ManPad. To simplify development, I intend to convert manpages to the HTML format, so that I can simply put a webview and relax :)</p>

<p>But because I found no convincing man to html converter (were either buggy or slow), well&#8230; I created yet another man to html converter, webmanner. Surely it&#8217;s still far from perfect&#8230; But it&#8217;ll do for now :)</p>

<p>Read more about <a href="http://aspyct.github.com/aspyct/webmanner">webmanner on its dedicated page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APServiceBox update: self-injection]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/08/31/apservicebox-update-self-injection/"/>
    <updated>2012-08-31T01:10:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/08/31/apservicebox-update-self-injection</id>
    <content type="html"><![CDATA[<p>Small update to APServiceBox, adding the <code>NSObject+APServiceBox</code> category and the <code>defaultBox</code> method. These two allow you to make objects that will themselves ask for dependencies. This contributes to reduce the amount of code, and in some cases facilitates some difficult situations.</p>

<!-- more -->


<p>Read more about APServiceBox on <a href="http://aspyct.github.com/aspyct/apservicebox">its dedicated page</a>.</p>

<p>The first thing you should do is register your services and other dependencies into the default service box.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">AnalyticsManager</span> <span class="o">*</span><span class="n">analyticsManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AnalyticsManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">APServiceBox</span> <span class="n">defaultBox</span><span class="p">]</span> <span class="nl">registerDependency:</span><span class="n">analyticsManager</span> <span class="nl">as:</span><span class="s">@&quot;analyticsManager&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Or you can create your own box</span>
</span><span class='line'><span class="n">APServiceBox</span> <span class="o">*</span><span class="n">myBox</span> <span class="o">=</span> <span class="p">[[</span><span class="n">APServiceBox</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then call the <code>fillWithDependencies</code> method in the <code>init</code> of an object. This will use the default service box to fill the current object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">MyViewController</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">AnalyticsService</span> <span class="o">*</span><span class="n">analyticsService</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;NSObject+APServiceBox.h&quot;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MyViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// This will ask the [APServiceBox defaultBox] to provide available dependencies</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">fillWithDependencies</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shutils to the rescue]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/08/29/shutils-to-the-rescue/"/>
    <updated>2012-08-29T22:59:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/08/29/shutils-to-the-rescue</id>
    <content type="html"><![CDATA[<p>Today I had to import about ~150 file entries into an XML file. Being a good lazy geek, I could not resign myself to copy/paste this over. With the help of Rake and some custom-tailored scripts, I made it through in no time :)</p>

<!-- more -->


<p>All these files had the same format:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chapter1_slide1_fr.png
</span><span class='line'>chapter1_slide2_fr.png
</span><span class='line'>...
</span><span class='line'>chapter1_slide19_fr.png
</span><span class='line'>chapter2_slide1_fr.png</span></code></pre></td></tr></table></div></figure>


<p>Of course, when I tried to sort them with the <code>sort</code> command, it did not really work as expected&#8230; Because this is a lexicographical sort, and not the natural sort we would expect.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chapter1_slide19_fr.png
</span><span class='line'>chapter1_slide1_fr.png</span></code></pre></td></tr></table></div></figure>


<p>I needed a natural sort, just like the <a href="http://php.net/manual/en/function.natsort.php">natsort() function from PHP</a>. Actually, I also needed a small program that would list the contents of a directory and print its naturally-sorted contents.</p>

<p>These scripts are available on <a href="https://github.com/aspyct/shutils">my github</a>. You can easily install them for your user by running the <code>shutil_install.sh</code> script. You may have to <code>chmod +x</code> the scripts however. Read more on these scripts on their <a href="http://aspyct.github.com/aspyct/shutils">dedicated page</a>.</p>

<p>Hope you&#8217;ll find this useful, feel free to contribute your own scripts (via pull requests, for example :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APServiceBox: cross-dependency injection]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/08/29/apservicebox-cross-dependency-injection/"/>
    <updated>2012-08-29T22:03:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/08/29/apservicebox-cross-dependency-injection</id>
    <content type="html"><![CDATA[<p>APServiceBox had a little update today (v12.08.29). Now, when you call the <code>fill:</code> method for the first time, APServiceBox will first scan all its dependencies and fill them as well. Thus, you can have dependencies that depend on each other. All you have to do is register both dependencies into the container before you <code>fill:</code> your first object. Read on for an example.</p>

<!-- more -->




<figure class='code'><figcaption><span>StorageManager</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">StorageManager</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>PreferenceManager</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">PreferenceManager</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">StorageManager</span> <span class="o">*</span><span class="n">storageManager</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Usage example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">APServiceBox</span> <span class="o">*</span><span class="n">box</span> <span class="o">=</span> <span class="p">[[</span><span class="n">APServiceBox</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">box</span> <span class="nl">registerDependency:</span><span class="n">preferenceManger</span> <span class="nl">as:</span><span class="s">@&quot;preferenceManager&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">box</span> <span class="nl">registerDependency:</span><span class="n">storageManger</span> <span class="nl">as:</span><span class="s">@&quot;storageManager&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And if you invoke...</span>
</span><span class='line'><span class="p">[</span><span class="n">box</span> <span class="nl">fill:</span><span class="n">myObject</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...then the following is true:</span>
</span><span class='line'><span class="n">preferenceManager</span><span class="p">.</span><span class="n">storageManager</span> <span class="o">==</span> <span class="n">storageManager</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://aspyct.github.com/aspyct/apservicebox">More about APServiceBox</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix signal handling example]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/08/25/unix-signal-handling-example/"/>
    <updated>2012-08-25T09:42:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/08/25/unix-signal-handling-example</id>
    <content type="html"><![CDATA[<p>UNIX signals can occur in various situations. For example, when you hit ctrl-C in the terminal, a <code>SIGINT</code> (interrupt) is sent to the process. Likewise, when you want to kill for sure a process, you&#8217;ll send it the <code>SIGKILL</code> signal. Read below for an example of signal handling on UNIX systems, including <code>sigaction</code>, <code>sigsuspend</code>, <code>sigprocmask</code> et al.</p>

<!-- more -->




<figure class='code'><figcaption><span>UNIX signal handling example </span><a href='https://gist.github.com/3462238'>View on Gist</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt; </span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt; </span><span class="c1">// sigaction(), sigsuspend(), sig*()</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt; </span><span class="c1">// alarm()</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">handle_signal</span><span class="p">(</span><span class="kt">int</span> <span class="n">signal</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">handle_sigalrm</span><span class="p">(</span><span class="kt">int</span> <span class="n">signal</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">do_sleep</span><span class="p">(</span><span class="kt">int</span> <span class="n">seconds</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Usage example</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * First, compile and run this program:</span>
</span><span class='line'><span class="cm"> *     $ gcc signal.c</span>
</span><span class='line'><span class="cm"> *     $ ./a.out</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * It will print out its pid. Use it from another terminal to send signals</span>
</span><span class='line'><span class="cm"> *     $ kill -HUP &lt;pid&gt;</span>
</span><span class='line'><span class="cm"> *     $ kill -USR1 &lt;pid&gt;</span>
</span><span class='line'><span class="cm"> *     $ kill -ALRM &lt;pid&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Exit the process with ^C ( = SIGINT) or SIGKILL, SIGTERM</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sigaction</span> <span class="n">sa</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print pid, so that we can send signals from other shells</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;My pid is: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Setup the sighub handler</span>
</span><span class='line'>    <span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">handle_signal</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Restart the system call, if at all possible</span>
</span><span class='line'>    <span class="n">sa</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="n">SA_RESTART</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Block every signal during the handler</span>
</span><span class='line'>    <span class="n">sigfillset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa_mask</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Intercept SIGHUP and SIGINT</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGHUP</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Error: cannot handle SIGHUP&quot;</span><span class="p">);</span> <span class="c1">// Should not happen</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGUSR1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Error: cannot handle SIGUSR1&quot;</span><span class="p">);</span> <span class="c1">// Should not happen</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Will always fail, SIGKILL is intended to force kill your process</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGKILL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Cannot handle SIGKILL&quot;</span><span class="p">);</span> <span class="c1">// Will always happen</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;You can never handle SIGKILL anyway...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Error: cannot handle SIGINT&quot;</span><span class="p">);</span> <span class="c1">// Should not happen</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">Sleeping for ~3 seconds</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">do_sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">// Later to be replaced with a SIGALRM</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">handle_signal</span><span class="p">(</span><span class="kt">int</span> <span class="n">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Please note that printf et al. are NOT safe to use in signal handlers.</span>
</span><span class='line'><span class="cm">     * Look for async safe functions.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">signal_name</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sigset_t</span> <span class="n">pending</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Find out which signal we&#39;re handling</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">SIGHUP</span>:
</span><span class='line'>            <span class="n">signal_name</span> <span class="o">=</span> <span class="s">&quot;SIGHUP&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">SIGUSR1</span>:
</span><span class='line'>            <span class="n">signal_name</span> <span class="o">=</span> <span class="s">&quot;SIGUSR1&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">SIGINT</span>:
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Caught SIGINT, exiting now</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="nl">default:</span>
</span><span class='line'>            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Caught wrong signal: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">signal</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Caught %s, sleeping for ~3 seconds</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>           <span class="s">&quot;Try sending another SIGHUP / SIGINT / SIGALRM &quot;</span>
</span><span class='line'>           <span class="s">&quot;(or more) meanwhile</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">signal_name</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Indeed, all signals are blocked during this handler</span>
</span><span class='line'><span class="cm">     * But, at least on OSX, if you send 2 other SIGHUP,</span>
</span><span class='line'><span class="cm">     * only one will be delivered: signals are not queued</span>
</span><span class='line'><span class="cm">     * However, if you send HUP, INT, HUP,</span>
</span><span class='line'><span class="cm">     * you&#39;ll see that both INT and HUP are queued</span>
</span><span class='line'><span class="cm">     * Even more, on my system, HUP has priority over INT</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">do_sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Done sleeping for %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">signal_name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// So what did you send me while I was asleep?</span>
</span><span class='line'>    <span class="n">sigpending</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pending</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sigismember</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pending</span><span class="p">,</span> <span class="n">SIGHUP</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;A SIGHUP is waiting</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sigismember</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pending</span><span class="p">,</span> <span class="n">SIGUSR1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;A SIGUSR1 is waiting</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Done handling %s</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">signal_name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">handle_sigalrm</span><span class="p">(</span><span class="kt">int</span> <span class="n">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">signal</span> <span class="o">!=</span> <span class="n">SIGALRM</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Caught wrong signal: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">signal</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Got sigalrm, do_sleep() will end</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">do_sleep</span><span class="p">(</span><span class="kt">int</span> <span class="n">seconds</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sigaction</span> <span class="n">sa</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sigset_t</span> <span class="n">mask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">handle_sigalrm</span><span class="p">;</span> <span class="c1">// Intercept and ignore SIGALRM</span>
</span><span class='line'>    <span class="n">sa</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="n">SA_RESETHAND</span><span class="p">;</span> <span class="c1">// Remove the handler after first signal</span>
</span><span class='line'>    <span class="n">sigfillset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa_mask</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sigaction</span><span class="p">(</span><span class="n">SIGALRM</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get the current signal mask</span>
</span><span class='line'>    <span class="n">sigprocmask</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mask</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Unblock SIGALRM</span>
</span><span class='line'>    <span class="n">sigdelset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span> <span class="n">SIGALRM</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Wait with this mask</span>
</span><span class='line'>    <span class="n">alarm</span><span class="p">(</span><span class="n">seconds</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sigsuspend</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sigsuspend() returned</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quicksort, mergesort and binary search in ruby]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/08/23/quicksort-mergesort-and-binary-search-in-ruby/"/>
    <updated>2012-08-23T08:14:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/08/23/quicksort-mergesort-and-binary-search-in-ruby</id>
    <content type="html"><![CDATA[<p>Sample implementation of quicksort, mergesort and binary search in ruby. The two sort algorithms operate in O(n * lg(n)) time, and the search in O(lg(n)) time. Theory can be found in these <a href="http://www.cs.princeton.edu/courses/archive/spr07/cos226/lectures/04MergeQuick.pdf">slides on quicksort and mergesort</a> by Princeton. And for the practical point of view, have a look at the code of this article :)</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Sample implementation of quicksort, mergesort and binary_search in ruby</span>
</span><span class='line'><span class="c1"># Both algorithm sort in O(n * lg(n)) time</span>
</span><span class='line'><span class="c1">#Â Quicksort works inplace, where mergesort works in a new array</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">from</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">to</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">to</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>        <span class="c1"># Sort the whole array, by default</span>
</span><span class='line'>        <span class="n">to</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">from</span> <span class="o">&gt;=</span> <span class="n">to</span>
</span><span class='line'>        <span class="c1"># Done sorting</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Take a pivot value, at the far left</span>
</span><span class='line'>    <span class="n">pivot</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">from</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Min and Max pointers</span>
</span><span class='line'>    <span class="n">min</span> <span class="o">=</span> <span class="n">from</span>
</span><span class='line'>    <span class="n">max</span> <span class="o">=</span> <span class="n">to</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Current free slot</span>
</span><span class='line'>    <span class="n">free</span> <span class="o">=</span> <span class="n">min</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">min</span> <span class="o">&lt;</span> <span class="n">max</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">free</span> <span class="o">==</span> <span class="n">min</span> <span class="c1"># Evaluate array[max]</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">array</span><span class="o">[</span><span class="n">max</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">pivot</span> <span class="c1"># Smaller than pivot, must move</span>
</span><span class='line'>                <span class="n">array</span><span class="o">[</span><span class="n">free</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">max</span><span class="o">]</span>
</span><span class='line'>                <span class="n">min</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="n">free</span> <span class="o">=</span> <span class="n">max</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">max</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">free</span> <span class="o">==</span> <span class="n">max</span> <span class="c1"># Evaluate array[min]</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">array</span><span class="o">[</span><span class="n">min</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">pivot</span> <span class="c1"># Bigger than pivot, must move</span>
</span><span class='line'>                <span class="n">array</span><span class="o">[</span><span class="n">free</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">min</span><span class="o">]</span>
</span><span class='line'>                <span class="n">max</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="n">free</span> <span class="o">=</span> <span class="n">min</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">min</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">raise</span> <span class="s2">&quot;Inconsistent state&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">array</span><span class="o">[</span><span class="n">free</span><span class="o">]</span> <span class="o">=</span> <span class="n">pivot</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">quicksort</span> <span class="n">array</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">free</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">quicksort</span> <span class="n">array</span><span class="p">,</span> <span class="n">free</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">to</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mergesort</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="c1"># Array of length 1 or less is always sorted</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">array</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Apply &quot;Divide &amp; Conquer&quot; strategy</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 1. Divide</span>
</span><span class='line'>    <span class="n">mid</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">part_a</span> <span class="o">=</span> <span class="n">mergesort</span> <span class="n">array</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
</span><span class='line'>    <span class="n">part_b</span> <span class="o">=</span> <span class="n">mergesort</span> <span class="n">array</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="n">mid</span><span class="p">,</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="n">mid</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 2. Conquer</span>
</span><span class='line'>    <span class="n">array</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">offset_a</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">offset_b</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">offset_a</span> <span class="o">&lt;</span> <span class="n">part_a</span><span class="o">.</span><span class="n">count</span> <span class="o">&amp;&amp;</span> <span class="n">offset_b</span> <span class="o">&lt;</span> <span class="n">part_b</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="n">part_a</span><span class="o">[</span><span class="n">offset_a</span><span class="o">]</span>
</span><span class='line'>        <span class="n">b</span> <span class="o">=</span> <span class="n">part_b</span><span class="o">[</span><span class="n">offset_b</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Take the smallest of the two, and push it on our array</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="n">b</span>
</span><span class='line'>            <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">a</span>
</span><span class='line'>            <span class="n">offset_a</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">b</span>
</span><span class='line'>            <span class="n">offset_b</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># There is at least one element left in either part_a or part_b (not both)</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">offset_a</span> <span class="o">&lt;</span> <span class="n">part_a</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>        <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">part_a</span><span class="o">[</span><span class="n">offset_a</span><span class="o">]</span>
</span><span class='line'>        <span class="n">offset_a</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">offset_b</span> <span class="o">&lt;</span> <span class="n">part_b</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>        <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">part_b</span><span class="o">[</span><span class="n">offset_b</span><span class="o">]</span>
</span><span class='line'>        <span class="n">offset_b</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">array</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Search a sorted array in O(lg(n)) time</span>
</span><span class='line'><span class="k">def</span> <span class="nf">binary_search</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">from</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">to</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">to</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>        <span class="n">to</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">from</span> <span class="o">+</span> <span class="n">to</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">binary_search</span> <span class="n">array</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">value</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">binary_search</span> <span class="n">array</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">to</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mid</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="o">].</span><span class="n">shuffle</span>
</span><span class='line'><span class="c1"># Quicksort operates inplace (i.e. in &quot;a&quot; itself)</span>
</span><span class='line'><span class="c1"># There&#39;s no need to reassign</span>
</span><span class='line'><span class="n">quicksort</span> <span class="n">a</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;quicksort&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="o">].</span><span class="n">shuffle</span>
</span><span class='line'><span class="c1"># Mergesort operates in new array</span>
</span><span class='line'><span class="c1"># So we need to reassign</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">mergesort</span> <span class="n">b</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;mergesort&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">b</span>
</span><span class='line'>
</span><span class='line'><span class="n">offset_3</span> <span class="o">=</span> <span class="n">binary_search</span> <span class="n">a</span><span class="p">,</span> <span class="mi">3</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;3 is at offset </span><span class="si">#{</span><span class="n">offset_3</span><span class="si">}</span><span class="s2"> in a&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">offset_15</span> <span class="o">=</span> <span class="n">binary_search</span> <span class="n">b</span><span class="p">,</span> <span class="mi">15</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;15 is at offset </span><span class="si">#{</span><span class="n">offset_15</span><span class="si">}</span><span class="s2"> in b&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binomial heap in ruby]]></title>
    <link href="http://aspyct.github.com/aspyct/blog/2012/08/22/binomial-heap-in-ruby/"/>
    <updated>2012-08-22T21:46:00+02:00</updated>
    <id>http://aspyct.github.com/aspyct/blog/2012/08/22/binomial-heap-in-ruby</id>
    <content type="html"><![CDATA[<p>Sample implementation of a binomial heap (or &#8220;priority queue&#8221;) in ruby. Read these excellent <a href="http://www.cs.princeton.edu/~wayne/cs423/lectures/heaps-4up.pdf">slides about heaps</a> from Princeton for theory. And see my source code for practice :)</p>

<!-- more -->




<figure class='code'><figcaption><span>heap.rb </span><a href='https://gist.github.com/3428688'>View it on gist</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Heap</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>        <span class="c1"># @elements is an array representing the tree</span>
</span><span class='line'>        <span class="c1"># for each i:</span>
</span><span class='line'>        <span class="c1"># parent =&gt; @elements[i / 2]</span>
</span><span class='line'>        <span class="c1"># left =&gt; @elements[i * 2]</span>
</span><span class='line'>        <span class="c1"># right =&gt; @elements[i * 2 + 1]</span>
</span><span class='line'>        <span class="vi">@elements</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">empty</span>
</span><span class='line'>        <span class="k">return</span> <span class="vi">@elements</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">pop_min</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="vi">@elements</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Replace the [0]th element with the last one and bubble it down</span>
</span><span class='line'>        <span class="n">pair</span> <span class="o">=</span> <span class="vi">@elements</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># If it was the last element of the array, abort anyway</span>
</span><span class='line'>        <span class="k">if</span> <span class="vi">@elements</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>            <span class="vi">@elements</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">pair</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">.</span><span class="n">bubble_down</span> <span class="n">pair</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">peek_min</span>
</span><span class='line'>        <span class="k">return</span> <span class="vi">@elements</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">first</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># Put the element at the end of the array and bubble it up the tree</span>
</span><span class='line'>        <span class="n">offset</span> <span class="o">=</span> <span class="vi">@elements</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>        <span class="n">pair</span> <span class="o">=</span> <span class="o">[</span><span class="n">object</span><span class="p">,</span> <span class="n">order</span><span class="o">]</span>
</span><span class='line'>        <span class="vi">@elements</span> <span class="o">&lt;&lt;</span> <span class="n">pair</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">bubble_up</span> <span class="n">pair</span><span class="p">,</span> <span class="n">offset</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">bubble_up</span><span class="p">(</span><span class="n">pair</span><span class="p">,</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># Push an element up the tree, if need be</span>
</span><span class='line'>        <span class="n">parent</span> <span class="o">=</span> <span class="n">offset</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">offset</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="vi">@elements</span><span class="o">[</span><span class="n">parent</span><span class="o">].</span><span class="n">last</span> <span class="o">&gt;</span> <span class="n">pair</span><span class="o">.</span><span class="n">last</span><span class="p">)</span>
</span><span class='line'>            <span class="vi">@elements</span><span class="o">[</span><span class="n">parent</span><span class="o">]</span><span class="p">,</span> <span class="vi">@elements</span><span class="o">[</span><span class="n">offset</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@elements</span><span class="o">[</span><span class="n">offset</span><span class="o">]</span><span class="p">,</span> <span class="vi">@elements</span><span class="o">[</span><span class="n">parent</span><span class="o">]</span>
</span><span class='line'>            <span class="n">offset</span> <span class="o">=</span> <span class="n">parent</span>
</span><span class='line'>            <span class="n">parent</span> <span class="o">=</span> <span class="n">offset</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">bubble_down</span><span class="p">(</span><span class="n">pair</span><span class="p">,</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># Push an element down the tree if need be</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">offset</span> <span class="o">&lt;</span> <span class="vi">@elements</span><span class="o">.</span><span class="n">count</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>            <span class="n">offset_a</span> <span class="o">=</span> <span class="n">offset</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>            <span class="n">offset_b</span> <span class="o">=</span> <span class="n">offset_a</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="vi">@elements</span><span class="o">[</span><span class="n">offset_a</span><span class="o">].</span><span class="n">last</span> <span class="o">&gt;</span> <span class="vi">@elements</span><span class="o">[</span><span class="n">offset_b</span><span class="o">].</span><span class="n">last</span>
</span><span class='line'>                <span class="n">smallest</span> <span class="o">=</span> <span class="n">offset_b</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">smallest</span> <span class="o">=</span> <span class="n">offset_a</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">pair</span><span class="o">.</span><span class="n">last</span> <span class="o">&lt;=</span> <span class="vi">@elements</span><span class="o">[</span><span class="n">smallest</span><span class="o">].</span><span class="n">last</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>            <span class="vi">@elements</span><span class="o">[</span><span class="n">offset</span><span class="o">]</span><span class="p">,</span> <span class="vi">@elements</span><span class="o">[</span><span class="n">smallest</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@elements</span><span class="o">[</span><span class="n">smallest</span><span class="o">]</span><span class="p">,</span> <span class="vi">@elements</span><span class="o">[</span><span class="n">offset</span><span class="o">]</span>
</span><span class='line'>            <span class="n">offset</span> <span class="o">=</span> <span class="n">smallest</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="no">Heap</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Insert &#39;a&#39; =&gt; &#39;o&#39; in the heap, random order</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;g&quot;</span><span class="p">,</span> <span class="mi">7</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;m&quot;</span><span class="p">,</span> <span class="mi">13</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;k&quot;</span><span class="p">,</span> <span class="mi">11</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;d&quot;</span><span class="p">,</span> <span class="mi">4</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="mi">3</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;n&quot;</span><span class="p">,</span> <span class="mi">14</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;f&quot;</span><span class="p">,</span> <span class="mi">6</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;j&quot;</span><span class="p">,</span> <span class="mi">10</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;i&quot;</span><span class="p">,</span> <span class="mi">9</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;e&quot;</span><span class="p">,</span> <span class="mi">5</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;o&quot;</span><span class="p">,</span> <span class="mi">15</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;h&quot;</span><span class="p">,</span> <span class="mi">8</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">push</span> <span class="s2">&quot;l&quot;</span><span class="p">,</span> <span class="mi">12</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Dump the heap</span>
</span><span class='line'><span class="k">while</span> <span class="o">!</span><span class="n">h</span><span class="o">.</span><span class="n">empty</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">h</span><span class="o">.</span><span class="n">pop_min</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
